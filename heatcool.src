#include "zeus2d.def"

	subroutine hc_sub(rho,xi0,e_0,e_1,i,j)
	  	use interpolation
		
       implicit NONE

#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "gravity.h"
#include "zeus_python.h"
#include "root.h"
#include "diskw.h"
        REAL    xi0,temp,hc_tot,rho,rho1,xi1,hc_tot1,e_0,e_1
	REAL    t_0,t_1,hc_01
	REAL 	e_01,t_01,sqsqxi1
	INTEGER i1,j1,i,j,hc_mode,xi_ind,code
	double precision t_l,t_u,tol,nh1,ne1,tfloor
	REAL heatcool,zbrent,zfunc,n1
	REAL test,hc_test
	common /hc_data/ xi1,e_01,hc_01,sqsqxi1,n1,i1,j1,nh1,ne1,hc_mode,
     + xi_ind
	external zfunc
	
	
	
c	print *,comp_c_lu(10,10),comp_h_lu(10,10),xray_h_lu(10,10)
c     + ,line_c_lu(10,10),brem_c_lu(10,10),comp_h_lu(10,10)-
c     +  comp_c_lu(10,10)+xray_h_lu(10,10)
c     + -line_c_lu(10,10)-brem_c_lu(10,10),hc_lu(10,10)
c	print *,"BLAH3",hc_lu(10,10),comp_c_lu(10,10)
	
c	print *,xi0/1e14
c   first calculate the current temperature of the cell	
	if (xi0.lt.1e-20) then
		t_1=1e4
	else
		
		
		
		
	t_01=e_0*(2.0/3.0)/((rho/(mu*mp))*boltz)
c	if (i.eq.4 .and. j.eq.96) then
c		print *,"t=",t_01
c	endif
	
	
	xi1=xi0
	i1=i
	j1=j
	e_01=e_0
	
c   compute xi to the quarter power, this is used a lot and doing this now saves time	
	sqsqxi1=sqrt(sqrt(xi0))

c   n1 is the particle density (including electrons)
	n1=rho/(mu*mp)
c   nh1 is the hydrogen density (based upon solar abundances)	
	nh1=rho/(1.43*mp)
c   ne1 is the electron density 	
	ne1=nh1*1.21


c stage one, bracket to find out where the zero point is

c the ionization parameter doesnt change so we only need
c to bracket it once. We also set the correct mode here.


c set hc_mode to 3 - this is default, blondin	
	hc_mode=3 
c if we have split heatcool files, then use these - mode 1
	if (split_heatcool) then
		xi_ind=binarysearch(n_lu_xi, lu_xi, xi1)
	      hc_mode=1
	  endif
c if we have individial heatcool files for each mechanism - mode
	  if (indiv_heatcool) then
      	xi_ind=binarysearch(n_lu_xi, lu_xi, xi1)
      	hc_mode=2
      endif
	  
	  
	
c we use the heating rate at the   originaltemperature a lot,
c lets compute it first		
c	print *,"Computing the initial heating/cooling"
	hc_01=heatcool(t_01)

c   the next few lines bracket the solution temperature
	t_l=t_01*0.9
	t_u=t_01*1.1	
c	print *,"Bracketing temp=",t_01,i,j,rho,e_0
	test=zfunc(t_l)*zfunc(t_u)
	tol=1.0
	

c	if (test.gt.0) then
c		print *,"PANIC"
c	endif
c	print *,"New run"
	  do while (test > 0)
		t_l=t_l*0.9
		if (t_l.lt.lu_temp(1)) then
			print *,"Extrapolating to lower T in cell ",i,j,
     + "T=",t_l 
		endif
		t_u=t_u*1.1
    		test=zfunc(t_l)*zfunc(t_u)
			
			
			
  	end do

c	if (i .eq.43 .and. j.eq.8) then
c		print *,d(i,j),t_l,t_u
c	endif
c now we have worked out a bracket, find the correct value of new temperature
c we search for the zero point of the equation e_old - e_old - dt(de(t(1/2)))	
c	print *,"XXXXXX calling zbrent",i,j,xi1,xi_ind,t_l,t_u,
c     + zfunc(t_l),zfunc(t_u)
	code=1
	     t_1=zbrent(zfunc,t_l,t_u,tol,code,i,j)
		 
		 if (code==0) then
 			print *,"Failure in zbrent for cell ",i,j,"xi=",xi1,
     + " t_l=",t_l," t_old=",t_01," t_u=",t_u," dens=",rho,"e_0=",e_0
	 print *,"Setting temperature to old temperature"
	 t_1=t_01
		endif

c we will call heatcool one last time to compute the heating and cooling rates for the new temperature	
	
c		 print *,'Back from zbrent, t=',t_1
	
		 
       tfloor=((3.0*ptmass*mdot*guniv)/  (8.0*pi*sb*
     &   (x1b(i)*sin(x2b(j)))**3.0) )**0.25
	  
c	  if (t_1.lt.tfloor) then
c	 print *,"temperature returned from cell",i,j," too low=",t_1
c	  t_1=tfloor
c      endif
c  And we finally call heatcool one last time to get the final heating and cooling rates	
c	  print *,"Finialised, calling one last time"
	hc_01=heatcool(t_1)
	
	if (indiv_heatcool) then
		hc_mode=2
		hc_test=heatcool(t_1)
	endif

c	print *,hc_test,hc_01



c now we have a new temperature, we will return the new internal energy. 
	e_1=t_1*1.5*n1*boltz
c	call exit()
	endif


	end



      double precision function heatcool(temp)
  	use interpolation
	  
      implicit NONE
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "zeus_python.h"
#include "root.h"
#include "diskw.h"
      integer i,j,mode
c	  REAL interpolate
      REAL    div1,div2,divv,del,pnew,pav,xi0,temp,hc_tot,rho,e_0,t_0
      REAL    gamma_comp,gamma_x,l_b,l_l,hc_0,sqsqxi,st,n,nh,ne,delta
	  REAL     lxi,lt,heat,cool
	  integer   i_ind,j_ind
	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n,i,j,nh,ne,mode,j_ind



	if (mode.eq.0) then
	i_ind=binarysearch(n_lu_temp, lu_temp, temp)	

	hc_tot=interpolate(n_lu_temp,lu_temp,n_lu_xi,lu_xi,hc_lu,temp,
     + xi0,delta,'done',i_ind,j_ind)
 	heatcool=hc_tot*ne*nh

	endif
	
c	print *,10**lxi,10**lt,heatcool,hc_tot
	if (mode.eq.1) then
		i_ind=binarysearch(n_lu_temp, lu_temp, temp)	
		
		lxi=log10(xi0)
		lt=log10(temp)


	heat_tot(i,j)=10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,heat_lu,lt,lxi,delta,'done',i_ind,j_ind)
 	cool_tot(i,j)=10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,cool_lu,lt,lxi,delta,'done',i_ind,j_ind)
	 
 	
	 
 	heatcool=(heat_tot(i,j)-cool_tot(i,j))*ne*nh
c 	print *,"after temp search",temp,i_ind,xi0,j_ind,heat,cool,
c     + heatcool


	endif
	

	
	if (mode.eq.2 .and. indiv_heatcool) then
		lxi=log10(xi0)
		lt=log10(temp)
		
		i_ind=binarysearch(n_lu_temp, lu_temp, temp)	
		
		


	c_line(i,j)=line_pre(i,j)*
     + 10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,line_c_lu,lt,lxi,delta,'done',i_ind,j_ind)*ne*nh
	c_comp(i,j)=comp_c_pre(i,j)*
     + 10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,comp_c_lu,lt,lxi,delta,'done',i_ind,j_ind)*ne*nh
	h_comp(i,j)=comp_h_pre(i,j)*
     + 10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,comp_h_lu,lt,lxi,delta,'done',i_ind,j_ind)*ne*nh
	c_brem(i,j)=brem_pre(i,j)*
     + 10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,brem_c_lu,lt,lxi,delta,'done',i_ind,j_ind)*ne*nh
	h_xray(i,j)=xray_pre(i,j)*
     + 10**interpolate(n_lu_temp,log_lu_temp,n_lu_xi,
     + log_lu_xi,xray_h_lu,lt,lxi,delta,'done',i_ind,j_ind)*ne*nh
	 
	 heat_tot(i,j)=h_comp(i,j)+h_xray(i,j)
	 cool_tot(i,j)=c_line(i,j)-c_brem(i,j)-c_comp(i,j)
	 
	 hc_tot=h_comp(i,j)+h_xray(i,j)-c_line(i,j)-c_brem(i,j)-
     +  c_comp(i,j)
	  
	 heatcool=hc_tot
c 	print *,lxi,lt,hc_tot,h_comp(i,j),interpolate(n_lu_temp,
c     + log_lu_temp,
c     + n_lu_xi,log_lu_xi,comp_h_lu,lt,lxi,delta)*ne*nh
	 


 	endif
	
	if (mode.eq.3) then
		st=sqrt(temp)
		
	
	h_comp(i,j)=comp_h_pre(i,j)*8.9e-36*xi0*tx*ne*nh
	c_comp(i,j)=comp_c_pre(i,j)*8.9e-36*xi0*(4.0*temp)*ne*nh
	
	h_xray(i,j)=xray_pre(i,j)*1.5e-21*(sqsqxi/st)*(1-(temp/tx))*ne*nh
	
	l_l=line_pre(i,j)*(1.7e-18*exp(-1.3e5/temp)/(xi0*st)+1e-24)*ne*nh
	
	l_b=brem_pre(i,j)*3.3e-27*st*ne*nh
	
	
	gamma_comp=h_comp(i,j)-c_comp(i,j)
	gamma_x=h_xray(i,j)
	c_brem(i,j)=l_b
	c_line(i,j)=l_l
	
	
	hc_tot=(gamma_comp+gamma_x-l_b-l_l)
	
	heat_tot(i,j)=h_comp(i,j)+h_xray(i,j)
	cool_tot(i,j)=c_line(i,j)-c_brem(i,j)-c_comp(i,j)
	
	
	heatcool=hc_tot

	endif
	
	

	
	
	net_hc(i,j)=heatcool

	end function



	double precision function zfunc(temp) 
	implicit NONE
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "zeus_python.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
	REAL rho,xi0,e_0,t_0,temp,heatcool,hc_0,logxi,sqsqxi,n,nh,ne
	INTEGER i,j,mode,j_ind
	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n,i,j,nh,ne,mode,j_ind
	external heatcool
	zfunc=(1.5*temp*n*boltz)-e_0-
     &  dt*(hc_0+heatcool(temp))/2.0
	end function



	  
	  subroutine hc_file_input()
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
#include "control.h"
		  integer i,j,ir,jt
		  
		  
		  LOGICAL THERE 
   
		  real r,theta,c_heat,x_heat,b_heat,l_heat,c_cool,x_cool,py_xi
          real b_cool,l_cool,n1,py_temp,py_ne,py_vol,ne,nh
          real comp_c_pre_old,comp_h_pre_old,xray_pre_old,line_pre_old,
     +     brem_pre_old,ratio,py_rho,py_nh
	 integer pre_limit,pre_limit_tmp
	 
	 pre_limit_tmp=0
	 pre_limit=0
	 
	 
	 
		  
c		  print *,"Got here OK"
         INQUIRE( FILE='py_heatcool.dat', EXIST=THERE ) 
          IF ( THERE ) then
		 	 open(66,file='py_heatcool.dat',status='old')
	  	   	read (66,*,end=20)
   		  	 do 10, n=1,10000000
 
		  	   	read (66,*,end=20) i,j,r,theta,py_vol,py_temp,py_xi,py_ne,
     &			x_heat,c_heat,l_heat,
     &   b_heat,c_cool,l_cool,b_cool,py_rho,py_nh
	 
	 ir=i+is 
	 jt=j+js
	 
	 if (abs((d(ir,jt)-py_rho)/py_rho) .gt. 1e-5) then
		 print *,"ALARM mismatch between zeus and python file",i,j,
     +d(ir,jt),py_rho,abs((d(ir,jt)-py_rho)/py_rho)
	endif
	 
	 

		 
c				print *,i,j,r,theta,x_heat,c_heat,l_heat,b_heat,x_cool,
c     &   c_cool,l_cool,b_cool,py_xi	   
				
				n1=d(ir,jt)/(mu*mp)
				
				nh=d(ir,jt)/(1.43*mp)
				ne=nh*1.21
				
c		  print *,hc_xray(i+2,j+3),x_heat/(n1*n1*1.2),x_cool/(n1*n1*1.2),
c     &   x_heat/(n1*n1*1.2)-x_cool/(n1*n1*1.2)
c		  do 10 i=is,ie
c			  do 20 j=js,je
c		  print *,is,i+2,ie,x1b(i+2)/r,js,j+3,je,x2b(j+3)/
c     &  (theta)
				comp_c_pre_old=comp_c_pre(ir,jt) 
                comp_h_pre_old=comp_h_pre(ir,jt)
                xray_pre_old=xray_pre(ir,jt)
                line_pre_old=line_pre(ir,jt)
                brem_pre_old=brem_pre(ir,jt)      
                        
                        
                        
                        
                         
		 comp_h_pre(ir,jt)=comp_h_pre(ir,jt)*(c_heat)/
     &   ((h_comp(ir,jt))+1d-99)
		 comp_c_pre(ir,jt)=comp_c_pre(ir,jt)*(c_cool)/
     &   ((c_comp(ir,jt))+1d-99)
	 

		 
c	 if (i.eq.1) then
c	  print *,"COMP test",i,j,comp_c_pre(i+2,j+3),
c     &   c_comp(i+2,j+3),ne*nh*c_comp(i+2,j+3),c_cool,ne,nh,
c     &    xi(i+2,j+3),d(i+2,j+3),
c     &   e(i+2,j+3)*(2.0/3.0)/((d(i+2,j+3)/(mu*mp))*boltz)
c        endif
		 xray_pre(ir,jt)=xray_pre(ir,jt)*x_heat/
     &   ((h_xray(ir,jt))+1d-99)
 		 line_pre(ir,jt)=line_pre(ir,jt)*l_cool/
     &   ((c_line(ir,jt))+1d-99)
 		 brem_pre(ir,jt)=brem_pre(ir,jt)*b_cool/
     &   ((c_brem(ir,jt))+1d-99)
	 
	 
	 

	 
	 
        if (hc_lim.gt.0.0) then
        ratio=hc_lim
	  
	  
c hc_lim is negative, which means we dont want to limit hc changes	  
c	  print *,"CHECKING ",i,j
      if (comp_h_pre(ir,jt)/comp_h_pre_old .lt. ratio) then
c		  print *,"comp_h_pre=",comp_h_pre(i+2,j+3),' LIMITING LO'
           comp_h_pre(ir,jt)=comp_h_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
      endif
      if (comp_c_pre(ir,jt)/comp_c_pre_old .lt. ratio) then
c		  print *,"comp_c_pre=",comp_c_pre(i+2,j+3),' LIMITING LO'
		  
           comp_c_pre(ir,jt)=comp_c_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
		   
      endif
      if (xray_pre(ir,jt)/xray_pre_old .lt. ratio) then
c		  print *,"xray_pre=",xray_pre(i+2,j+3),' LIMITING LO'
		  
           xray_pre(ir,jt)=xray_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
		   
      endif
      if (line_pre(ir,jt)/line_pre_old .lt. ratio) then
c		  print *,"line_pre=",line_pre(i+2,j+3),' LIMITING LO'
		  
            line_pre(ir,jt)=line_pre_old*ratio
 		   pre_limit_tmp=pre_limit_tmp+1
			
      endif
      if (brem_pre(ir,jt)/brem_pre_old .lt. ratio) then
c		  print *,"brem_pre=",brem_pre(i+2,j+3),' LIMITING LO'
		  
            brem_pre(ir,jt)=brem_pre_old*ratio
 		   pre_limit_tmp=pre_limit_tmp+1
			
      endif
      
      
      ratio=1.0/hc_lim
     
      if (comp_h_pre(ir,jt)/comp_h_pre_old .gt. ratio) then
c		  print *,"comp_h_pre=",comp_h_pre(i+2,j+3),' LIMITING HI'
		  
           comp_h_pre(ir,jt)=comp_h_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
		   
      endif
      if (comp_c_pre(ir,jt)/comp_c_pre_old .gt. ratio) then
c		  print *,"comp_h_pre=",comp_c_pre(i+2,j+3),' LIMITING HI'
		  
           comp_c_pre(ir,jt)=comp_c_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
		   
      endif
      if (xray_pre(ir,jt)/xray_pre_old .gt. ratio) then
		   xray_pre(ir,jt)=xray_pre_old*ratio
		   pre_limit_tmp=pre_limit_tmp+1
		   
      endif
      if (line_pre(ir,jt)/line_pre_old .gt. ratio) then
c		  print *,"line_pre=",line_pre(i+2,j+3),' LIMITING HI'
		  
            line_pre(ir,jt)=line_pre_old*ratio
 		   pre_limit_tmp=pre_limit_tmp+1
			
      endif
      if (brem_pre(ir,jt)/brem_pre_old .gt. ratio) then
c		  print *,"brem_pre=",brem_pre(i+2,j+3),' LIMITING HI'
		  
            brem_pre(ir,jt)=brem_pre_old*ratio		
			   pre_limit_tmp=pre_limit_tmp+1

      endif
      else
		  print *,"We are not limiting changes in HC rates"
	  endif
     
c	  print *,'COMP_C_PRE    old=',comp_c_pre_old,
c     c' new=',comp_c_pre(i+2,j+3) 
c      print *,'COMP_H_PRE    old=',comp_h_pre_old,
c     c' new=',comp_h_pre(i+2,j+3)
c      print *,'XRAY_PRE    old=',xray_pre_old,
c     c' new=',xray_pre(i+2,j+3)
c      print *,'LINE_PRE    old=',line_pre_old,
c     c' new=',line_pre(i+2,j+3)
c      print *,'BREM_PRE    old=',brem_pre_old,
c     c' new=',brem_pre(i+2,j+3)  
	 
	 
     
     
     
c      print *,i,j,ne,py_ne,comp_cool_pre_old,comp_c_pre(i+2,j+3),
c     +  ne*nh*c_comp(i+2,j+3),c_cool
c      print *,x_heat,c_heat,l_heat,
c     &   b_heat,c_cool,l_cool,b_cool
c      print *,i,j,py_temp,e(i+2,j+3)/(1.5*n1*boltz),
c     + comp_cool_pre_old,comp_c_pre(i+2,j+3)

c		  print *,i+3,j+3,r,theta
c 20 		continue
		if (pre_limit_tmp .gt. 0) then
			pre_limit=pre_limit+1
			pre_limit_tmp=0
		endif
10		continue
		
20		print *,"There are ",n," records"	
		print *,pre_limit," cells had HC prefactor change limited"
		
		  close unit=66
	  else
		  print *,"There is no heatcool file - continuuing normally"
	  endif
		  
		  
		  RETURN
	  END




