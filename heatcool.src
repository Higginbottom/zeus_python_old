#include "zeus2d.def"


	subroutine hc_sub(rho,xi0,e_0,e_1,i,j)

       implicit NONE

#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
        REAL    xi0,temp,hc_tot,rho,rho1,xi1,hc_tot1,e_0,e_1
	REAL    t_0,t_1,hc_01
	REAL 	e_01,t_01,sqsqxi1
	INTEGER i1,j1,i,j
	double precision t_l,t_u,tol
	REAL heatcool,zbrent,zfunc,n1
	real test
	common /hc_data/ xi1,e_01,hc_01,sqsqxi1,n1,i1,j1
	external zfunc
	t_01=e_0*(2.0/3.0)/((rho/(mu*mp))*boltz)
c	print *,e_0,rho,t_01
	xi1=xi0
	i1=i
	j1=j
	e_01=e_0
	sqsqxi1=sqrt(sqrt(xi0))

	n1=rho/mp


c stage one, bracket to find out where the zero point is


c we use the heating rate at the originaltemperature a lot,
c lets compute it first
	hc_01=heatcool(t_01)

	t_l=t_01*0.9
	t_u=t_01*1.1
	test=zfunc(t_l)*zfunc(t_u)
	tol=1.0

	  do while (test > 0)
		t_l=t_l*0.9
		t_u=t_u*1.1
    		test=zfunc(t_l)*zfunc(t_u)
  	end do
c now we have worked out a bracket, find the correct value of new temperature
c we search for the zero point of the equation e_old - e_old - dt(de(t(1/2)))
	
	
	t_1=zbrent(zfunc,t_l,t_u,tol)
	
c we will call heatcool one last time to compute the heating and cooling rates for old t	
	
	hc_01=heatcool(t_01)
	

c now we have a new temperature, we will return the new internal energy. 
	e_1=t_1*1.5*n1/mu*boltz

	end



      double precision function heatcool(temp)
      implicit NONE
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
      integer i,j
      REAL    div1,div2,divv,del,pnew,pav,xi0,temp,hc_tot,rho,e_0,t_0
      REAL    gamma_comp,gamma_x,l_b,l_l,hc_0,sqsqxi,st,n
	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n,i,j

	st=sqrt(temp)


	gamma_comp=comp_pre(i,j)*8.9e-36*xi0*(tx-(4.0*temp))
	hc_comp(i,j)=gamma_comp
c	gamma_x=sqrt(xi)
c	gamma_x=sqrt(gamma_x)
c	gamma_x=gamma_x*1.5e-21
c	gamma_x=gamma_x/sqrt(temp)
c	gamma_x=gamma_x*(1-temp/tx)
	gamma_x=xray_pre(i,j)*1.5e-21*(sqsqxi/st)*(1.0-temp/tx)
	hc_xray(i,j)=gamma_x
	l_b=brem_pre(i,j)*3.3e-27*st
	hc_brem(i,j)=l_b
c	l_l=exp(-1.3e5/temp)
c	l_l=l_l/xi
c	l_l=l_l/sqrt(temp)
c	l_l=l_l*1.7e-18
c	l_l=l_l+1e-24
	l_l=line_pre(i,j)*(1.7e-18*exp(-1.3e5/temp)/(xi0*st)+1e-24)
	hc_line(i,j)=l_l
c	print *,temp,xi,gamma_comp,gamma_x,l_b,l_l
	hc_tot=n*n*(gamma_comp+gamma_x-l_b-l_l)
c	print *,temp,xi,gamma_comp,gamma_x,l_b,l_l,n,hc_tot
	
	
	heatcool=hc_tot
	end function



	double precision function zfunc(temp) 
	implicit NONE
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
	REAL rho,xi0,e_0,t_0,temp,heatcool,hc_0,logxi,sqsqxi,n
	INTEGER i,j
	common /hc_data/ xi0,e_0,hc_0,sqsqxi,n,i,j
	external heatcool
	zfunc=(1.5*temp*n/mu*boltz)-e_0-
     &  dt*(hc_0+heatcool(temp))/2.0
c	print *,temp,zfunc
	end function


c     this file contains the quasi-vanilla and slightly modified
c     versions of FORTRAN Numerical Recipe routines

c     DOUBLE PRECISION FUNCTION ZBRENT(FUNC,X1,X2,TOL)

c     MODIFICATIONS from the vanilla Numerical Recipes: all of the
c     following routines have been trivially modified in two ways from
c     the original vanilla; (1) the declarations are now IMPLICIT NONE
c     or IMPLICIT DOUBLE PRECISION; (2) communication of errors which
c     may occur in the form of WRITE statements with hard STOPs; some of
c     the routines have been further modified (see comments in each
c     routine for details)

c::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

      REAL FUNCTION ZBRENT(FUNC,X1,X2,TOL)

c     return the root of the function FUNC using Brents method where
c     the root of the function is assumed lie between X1 and X2; the
c     root is refined until its accuracy is TOL and is returned as
c     ZBRENT

c..............................................................................

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (ITMAX=100,EPS=3.E-16)
      A=X1
      B=X2
      FA=FUNC(A)
      FB=FUNC(B)
c     error: Root not bracketed 
      IF(FB*FA.GT.0.) THEN
       WRITE(6,*) 'ERROR(zbrent): root of FUNC not bracketed.'
       WRITE(6,*) 'lower bracket A = ',A,' FUNC(A) = ',FUNC(A)
       WRITE(6,*) 'upper bracket B = ',B,' FUNC(B) = ',FUNC(B)
       WRITE(6,*) 'this can be remedied by changing A and/or B'
       call exit(5)
      END IF
      FC=FB
      DO 11 ITER=1,ITMAX
        IF(FB*FC.GT.0.) THEN
          C=A
          FC=FA
          D=B-A
          E=D
        ENDIF
        IF(ABS(FC).LT.ABS(FB)) THEN
          A=B
          B=C
          C=A
          FA=FB
          FB=FC
          FC=FA
        ENDIF
        TOL1=2.*EPS*ABS(B)+0.5*TOL
        XM=.5*(C-B)
        IF(ABS(XM).LE.TOL1 .OR. FB.EQ.0.)THEN
          ZBRENT=B
c	print *,"zbrent took ",ITER," iterations"
          RETURN
        ENDIF
        IF(ABS(E).GE.TOL1 .AND. ABS(FA).GT.ABS(FB)) THEN
          S=FB/FA
          IF(A.EQ.C) THEN
            P=2.*XM*S
            Q=1.-S
          ELSE
            Q=FA/FC
            R=FB/FC
            P=S*(2.*XM*Q*(Q-R)-(B-A)*(R-1.))
            Q=(Q-1.)*(R-1.)*(S-1.)
          ENDIF
          IF(P.GT.0.) Q=-Q
          P=ABS(P)
          IF(2.*P .LT. MIN(3.*XM*Q-ABS(TOL1*Q),ABS(E*Q))) THEN
            E=D
            D=P/Q
          ELSE
            D=XM
            E=D
          ENDIF
        ELSE
          D=XM
          E=D
        ENDIF
        A=B
        FA=FB
        IF(ABS(D) .GT. TOL1) THEN
          B=B+D
        ELSE
          B=B+SIGN(TOL1,XM)
        ENDIF
        FB=FUNC(B)
11    CONTINUE
c     error message for too many iterations
      WRITE(6,*) 'ERROR(zbrent): number of iterations required to'
      WRITE(6,*) 'converge on the root of FUNC exceeded maximum'
      WRITE(6,*) 'allowed.  This can be remedied by increasing'
      WRITE(6,*) 'parameter ITMAX in the file or by relaxing'
      WRITE(6,*) 'the convrgence tolerance TOL'
      WRITE(6,*) '*** terminating program  ***'
      call exit(5)
      ZBRENT=B
      RETURN
      END
	  
	  
	  subroutine hc_file_input()
#include "cons.h"
#include "param.h"
#include "grid.h"
#include "field.h"
#include "root.h"
#include "diskw.h"
		  integer i,j
		  
		  
		  LOGICAL THERE 
   
		  real r,theta,c_heat,x_heat,b_heat,l_heat,c_cool,x_cool
          real b_cool,l_cool,n1
		  
		  print *,"Got here OK"
         INQUIRE( FILE='py_heatcool.dat', EXIST=THERE ) 
          IF ( THERE ) then
		 	 open(66,file='py_heatcool.dat',status='old')
		  	 do 10, n=1,10000000
 
		  	   	read (66,*,end=20) i,j,r,theta,x_heat,c_heat,l_heat,
     &   b_heat,x_cool,c_cool,l_cool,b_cool
c				print *,i,j,r,theta,x_heat,c_heat,l_heat,b_heat,x_cool,
c     &   c_cool,l_cool,b_cool		   
				n1=  d(i+2,j+3)/(mu*mp) 
		  print *,hc_comp(i+2,j+3),c_heat/(n*n),c_cool/(n*n),c_heat/(n*n)-c_cool/(n*n)
c		  do 10 i=is,ie
c			  do 20 j=js,je
c		  print *,is,i+2,ie,x1b(i+2)/r,js,j+3,je,x2b(j+3)/
c     &  (theta)
				  
c		 comp_pre(i+3,j+3)=c_heat-c_cool
c		 xray_pre(i+3,j+3)=xray_heat-xray_cool
c		 line_pre(i+3,j+3)=line_cool
c		 brem_pre(i+3,j+3)=brem_cool
c		  print *,i+3,j+3,r,theta
c 20 		continue
10		continue
20		print *,"There are ",n," records"		  
		  close unit=66
	  else
		  print *,"There is no heatcool file - continuuing normally"
	  endif
		  
		  
		  RETURN
	  END




